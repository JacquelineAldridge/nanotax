/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

process {

    publishDir = [
        path: { "${params.outdir}/${task.process.tokenize(':')[-1].tokenize('_')[0].toLowerCase()}" },
        mode: params.publish_dir_mode,
        saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
    ]

    withName: 'BASECALLING' {
        publishDir = 
            [
                path: { "${params.outdir}/dorado/basecalling" },
                mode: params.publish_dir_mode,
                pattern: "*",
                enabled: false
            ]
    
    }
    withName: 'DEMULTIPLEXING' {
        publishDir = 
            [
                path: { "${params.outdir}/dorado/basecalling" },
                mode: params.publish_dir_mode,
                pattern: "*",
                enabled: false
            ]
    
    }
    withName: 'BASECALLING_FILTERING' {
        publishDir = 
            [
                path: { "${params.outdir}/dorado/basecalling" },
                mode: params.publish_dir_mode,
                pattern: "*",
                enabled: false
            ]
    
    }
    
    withName: PIGZ {
        ext.args = ''
        publishDir = [
            path: { "${params.outdir}/dorado/demux" },
            mode: params.publish_dir_mode,
            enabled: false    
            
            ]
    }
    withName: FASTQC {
        ext.args = '--quiet'
        publishDir = [
            path: { "${params.outdir}/QC/fastqc" },
            mode: params.publish_dir_mode        ]
    }
    withName: 'NANOQ_FILTER' {
        ext.args =  " -l  ${params.qc.min_length} -m  ${params.qc.max_length} -q ${params.qc.min_qscore} -vv" 
        publishDir = [
            [
                path: { "${params.outdir}/QC/nanoq_reports/post_filter" },
                mode: params.publish_dir_mode,
                pattern: "*.stats"
            ],
            [
                path: { "${params.outdir}/QC/fastq/filtered" },
                mode: params.publish_dir_mode,
                pattern: "*.fastq.gz",
                enabled: params.qc.save_reads

            ]
        ]
    }
    withName: 'NANOQ_QC_RAW' {
        ext.args =  "-vv" 
        ext.prefix = {"${meta.id}_raw"}
        publishDir = [
            path: { "${params.outdir}/QC/nanoq_reports/pre_filter" },
            mode: params.publish_dir_mode,
            pattern: "*.stats"

        ]
    }
    withName: 'FILTLONG' {
        n = 1500 * params.qc.subsampling
        ext.args =  "--target_bases ${n} --length_weight 0"
        ext.prefix = {"${meta.id}_subsampling"}
        publishDir = [
            path: { "${params.outdir}/QC/fastq/filtered_sampling" },
            mode: params.publish_dir_mode,
            enabled: params.qc.save_reads,
            pattern: "*.fastq.gz"

        ]
    }
    withName: 'BLASTCMD' {
    publishDir = [
        path: "${params.outdir}/db/",
        mode: params.publish_dir_mode,
        pattern: "*",
        enabled: false
    ]
    }

    withName: 'MMSEQS_EASYSEARCH' {
        ext.args =  "--search-type 3 --min-aln-len ${params.taxonomic_assignment.min_aln} --min-seq-id ${params.taxonomic_assignment.min_identity}  --format-output 'query,target,pident,tcov,alnlen,taxname,taxlineage'"
        publishDir = [
        path: "${params.outdir}/taxonomy/mmseqs_output/",
        mode: params.publish_dir_mode,
        pattern: "*",
        enabled: false
    ]
    }  


    withName: 'MERGE_AND_GROUP_SAMPLES' {
        publishDir =[ 
        path: "${params.outdir}/taxonomy/csv",
        mode: params.publish_dir_mode,
        pattern: "*",
    ]

    }  


    withName: 'PLOT_TAXONOMY' {
        publishDir =[ 
        path: "${params.outdir}/taxonomy/plots/",
        mode: params.publish_dir_mode,
        pattern: "*",
    ]

    }  

    withName: 'PLOT_CORE' {
        publishDir =[ 
        path: "${params.outdir}/taxonomy/plots/core/",
        mode: params.publish_dir_mode,
        pattern: "*",
    ]

    }  
    
    withName: 'DIVERSITY' {
        publishDir =[ 
        path: "${params.outdir}/diversity/",
        mode: params.publish_dir_mode,
        pattern: "*",
    ]

    }  
    
    withName: 'PICRUST2' {
        publishDir =[ 
        path: "${params.outdir}/functional_prediction/picrust2_results",
        mode: params.publish_dir_mode,
        pattern: "*",
    ]

    }  

    withName: 'MERGE_PICRUST_OUT' {
        publishDir =[ 
        path: "${params.outdir}/functional_prediction/picrust2_results/",
        mode: params.publish_dir_mode,
        pattern: "*.csv",
    ]

    }  

    withName: 'LEFSE' {
        publishDir =[ 
        path: "${params.outdir}/functional_prediction/DE_lefse/",
        mode: params.publish_dir_mode,
        pattern: "*.csv",
    ]

    }  
    withName: 'PLOT_LEFSE' {
        publishDir =[ 
        path: "${params.outdir}/functional_prediction/DE_lefse/",
        mode: params.publish_dir_mode,
        pattern: "*.pdf",
    ]

    }  
    
    withName: 'MULTIQC' {
        ext.args   = { params.multiqc_title ? "--title \"$params.multiqc_title\"" : '' }
        publishDir = [
            path: { "${params.outdir}/" },
            mode: params.publish_dir_mode,
            pattern: "*.html",
            saveAs: { filename -> filename.equals('versions.yml') ? null : filename }

        ]
    }
}
